/*
 * DemoServer.java
 */

package de.hswt.swa.rmi;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.Naming;

import java.io.File;
import java.util.Date;
import java.util.Vector;
import java.text.SimpleDateFormat;

import de.hswt.swa.tools.StatisticsCalculator;
import de.hswt.swa.tools.StatisticsCalculatorService;

public class DemoServer extends UnicastRemoteObject implements
		DemoServerInterface, StatisticsCalculatorService {

	//StatisticsCalculatorService statisticsImpl = new StatisticsCalculator();

	public DemoServer() throws Exception {
		/*
		 * Konstruktor muss in jedem Falle auftauchen, auch wenn nichts drin
		 * steht!
		 */
	}

	/*
	 * Methoden des Interfaces:(sie entsprechen denen der Klasse RPCBearbeitung
	 */
	public String aktuelleUhrzeit() throws RemoteException {
		w("-> aktuelleUhrzeit(): ");

		Date jetzt = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat(
				"HH:mm:ss '-' dd.MM.yyyy");

		wln(formatter.format(jetzt));

		// Rï¿½ckgabe:
		return formatter.format(jetzt);
	}

	public synchronized String[] listeVerzeichnis(String verzeichnisname)
			throws RemoteException {
		w("-> listeVerzeichnis( '" + verzeichnisname + "' ): ");

		// Nach Verzeichnis suchen:
		File dir = new File(verzeichnisname);
		if (dir.exists() && dir.isDirectory()) {
			/*
			 * Das Verzeichnis existiert und es handelt sich um ein Verzeichnis
			 */
			String[] namen = dir.list();
			wln(namen.length + " Verzeichnisse");

			return namen;
		} else {
			// existiert nicht:
			wln("unbekannt");

			return new String[] { "existiert nicht" };
		}
	}

	// -------------> Hauptfunktion

	public static void main(String args[]) {
		try {

			try {
				LocateRegistry.createRegistry(13001);
			} catch (RemoteException e) {
				/* ... */
			}

			// 1. Schritt: Serverobjekt erzeugen:
			DemoServer server = new DemoServer();

			w("Anmeldung am Broker: ");

			// 2. Schritt: Registrierung am Broker als 'demoService':
			Naming.rebind("rmi://localhost:13001/demoService", server);

			// Fertig!
			wln("erfolgreich");

		} catch (Exception e) {
			e.printStackTrace();
			wln("Es ist folgender Fehler aufgetreten:");
			wln(e.toString());
		}
	}

	// -------------------------------------------------> Hilfsroutinen:
	private static void wln(String s) {
		System.out.println(s);
	}

	private static void w(String s) {
		System.out.print(s);
	}

	@Override
	public synchronized void setValues(Vector values) throws RemoteException {
		//statisticsImpl.setValues(values);
	}

	@Override
	public synchronized double getStandardDeviation() throws RemoteException {
		return 0;//statisticsImpl.getStandardDeviation();
	}

}
